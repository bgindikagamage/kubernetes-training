apiVersion: v1
kind: Namespace
metadata:
  annotations:
    contact: tobias@giantswarm.io
  name: keycloak
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    contact: tobias@giantswarm.io
  labels:
    app.kubernetes.io/part-of: keycloak
  name: keycloak-cluster-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: oidc:/cluster-admins
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    contact: tobias@giantswarm.io
  labels:
    app.kubernetes.io/part-of: keycloak
  name: keycloak-cluster-users
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: view
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: oidc:/cluster-users
---
apiVersion: v1
data:
  password: UGgmRTUhRkJudURAWTdtRnBZRTReY2g0NUdDUmc2Rko=
kind: Secret
metadata:
  annotations:
    contact: tobias@giantswarm.io
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/part-of: keycloak
  name: keycloak-admin-user
  namespace: keycloak
type: Opaque
---
apiVersion: v1
data:
  postgres-password: MCtqT1BkNXU1VVZZd016WlA4YWt0WU5ydlRkRTFaektMTGU4WCtuM1c2cz0=
kind: Secret
metadata:
  annotations:
    contact: tobias@giantswarm.io
  labels:
    app.kubernetes.io/component: database
    app.kubernetes.io/name: postgres
    app.kubernetes.io/part-of: keycloak
  name: postgres
  namespace: keycloak
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    contact: tobias@giantswarm.io
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/part-of: keycloak
  name: keycloak
  namespace: keycloak
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/part-of: keycloak
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    contact: tobias@giantswarm.io
  labels:
    app.kubernetes.io/component: database
    app.kubernetes.io/name: postgres
    app.kubernetes.io/part-of: keycloak
  name: postgres
  namespace: keycloak
spec:
  ports:
  - name: postgres
    port: 5432
    protocol: TCP
    targetPort: postgres
  selector:
    app.kubernetes.io/component: database
    app.kubernetes.io/name: postgres
    app.kubernetes.io/part-of: keycloak
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    contact: tobias@giantswarm.io
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/part-of: keycloak
  name: keycloak
  namespace: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: server
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/part-of: keycloak
  serviceName: keycloak
  template:
    metadata:
      annotations:
        contact: tobias@giantswarm.io
      labels:
        app.kubernetes.io/component: server
        app.kubernetes.io/name: keycloak
        app.kubernetes.io/part-of: keycloak
    spec:
      containers:
      - env:
        - name: KEYCLOAK_USER
          value: keycloak
        - name: KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: keycloak-admin-user
        - name: DB_VENDOR
          value: postgres
        - name: DB_ADDR
          value: postgres
        - name: DB_PORT
          value: "5432"
        - name: POSTGRES_PORT
          value: "5432"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-password
              name: postgres
        - name: PROXY_ADDRESS_FORWARDING
          value: "true"
        image: jboss/keycloak:4.8.3.Final
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /auth/
            port: http
            scheme: HTTP
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: keycloak
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /auth/
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
      initContainers:
      - command:
        - sh
        - -c
        - |
          until printf "." && nc -z -w 2 postgres 5432; do
            sleep 2;
          done;
          echo 'PostgreSQL OK âœ“'
        image: alpine:3.7
        imagePullPolicy: IfNotPresent
        name: wait-for-postgresql
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      terminationGracePeriodSeconds: 60
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates: null
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    contact: tobias@giantswarm.io
  labels:
    app.kubernetes.io/component: database
    app.kubernetes.io/name: postgres
    app.kubernetes.io/part-of: keycloak
  name: postgres
  namespace: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: database
      app.kubernetes.io/name: postgres
      app.kubernetes.io/part-of: keycloak
  serviceName: postgres
  template:
    metadata:
      annotations:
        contact: tobias@giantswarm.io
      labels:
        app.kubernetes.io/component: database
        app.kubernetes.io/name: postgres
        app.kubernetes.io/part-of: keycloak
    spec:
      containers:
      - env:
        - name: POSTGRES_DB
          value: keycloak
        - name: POSTGRES_USER
          value: keycloak
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-password
              name: postgres
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        image: postgres:9.6
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          failureThreshold: 6
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: postgres
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 3
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: data
          subPath: postgresql-data
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
      storageClassName: standard
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    contact: tobias@giantswarm.io
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/part-of: keycloak
  name: keycloak
  namespace: keycloak
spec:
  rules:
  - host: keycloak.cluster.mini
    http:
      paths:
      - backend:
          serviceName: keycloak
          servicePort: http
        path: /
  tls:
  - hosts:
    - keycloak.cluster.mini
    secretName: keycloak-tls
