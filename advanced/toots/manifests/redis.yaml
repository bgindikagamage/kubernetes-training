# similar to https://kubernetes.io/docs/tutorials/stateless-application/guestbook/#creating-the-redis-deployment
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: mastodon-watcher
  # recommended labels https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
  labels:
    app.kubernetes.io/name: redis
spec:
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
  - name: http-metrics
    port: 9121
    targetPort: 9121
  selector:
    app.kubernetes.io/name: redis

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-exporter-script
  namespace: mastodon-watcher
data:
  script.lua: |
    -- Example collect script for -script option
    -- This returns a Lua table with alternating keys and values.
    -- Both keys and values must be strings, similar to a HGETALL result.
    -- More info about Redis Lua scripting: https://redis.io/commands/eval

    local result = {}

    table.insert(result, "foo")
    table.insert(result, "42") -- note the string, use tostring() if needed

    return result

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: mastodon-watcher
  labels:
    app.kubernetes.io/name: redis
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
    spec:
      containers:
      - name: redis
        image: redis:5.0-alpine@sha256:c8d2a155166857e772e5389a44f2c9cbdabc7e7500123fdb9a04b5181b9756b8
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 6379
      - name: redis-exporter
        # image: oliver006/redis_exporter:v1.0.0-rc.1
        image: oliver006/redis_exporter:v0.34.1-alpine
        args:
        - -debug
        - "-redis.addr=redis://localhost:6379"
        # -check-keys=*
        - -check-single-keys=mastodon
        - -script=/opt/script.lua
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - name: http-metrics
          containerPort: 9121
        volumeMounts:
        - name: redis-exporter-script
          mountPath: /opt
      volumes:
      - name: redis-exporter-script
        configMap:
          name: redis-exporter-script

# FIXME add persistent volume
# maybe use statefulset?

# FIXME reference, maybe https://github.com/coreos/prometheus-operator/blob/master/Documentation/user-guides/running-exporters.md#generic-servicemonitor-example
# or https://github.com/helm/charts/tree/master/stable/prometheus-redis-exporter/templates
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: redis
  namespace: monitoring
  labels:
    app.kubernetes.io/name: redis
spec:
  jobLabel: k8s-app
  namespaceSelector:
    matchNames:
    - mastodon-watcher
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
  endpoints:
  - port: http-metrics
    # interval: 10s


# FIXME reference source
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: prometheus-k8s
  namespace: mastodon-watcher
rules:
- apiGroups:
  - ""
  resources:
  - services
  - endpoints
  - pods
  verbs:
  - get
  - list
  - watch

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prometheus-k8s
  namespace: mastodon-watcher
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prometheus-k8s
subjects:
- kind: ServiceAccount
  name: prometheus-k8s
  namespace: monitoring


---

# apiVersion: autoscaling/v2beta1
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: mastodon-watcher
  namespace: mastodon-watcher
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mastodon-watcher
  minReplicas: 1
  maxReplicas: 50
  metrics:
  # - type: Pods
  #   pods:
  #     metricName: redis_key_size
  #     targetAverageValue: 10

  - type: Object
    object:
      metric:
        name: redis_key_size
      describedObject:
        # apiVersion: networking.k8s.io/v1beta1
        # kind: Ingress
        # name: main-route
        # apiVersion: apps/v1
        # kind: Deployment
        # apiVersion: v1
        # namespace: mastodon-watcher
        # kind: Pod
        kind: Service
        name: redis
      target:
        type: Value
        value: 10

  # - type: External
  #   external:
  #     metric:
  #       name: redis_key_size
  #       # selector: "queue=worker_tasks"
  #     target:
  #       type: AverageValue
  #       averageValue: 30

  # - type: Object
  #   object:
  #     metric:
  #       name: http_requests
  #       selector: verb=GET

# ---
# apiVersion: autoscaling/v2beta2
# kind: HorizontalPodAutoscaler
# metadata:
#   name: mastodon-watcher
#   namespace: mastodon-watcher
# spec:
#   scaleTargetRef:
#     apiVersion: apps/v1
#     kind: Deployment
#     name: mastodon-watcher
#   minReplicas: 1
#   maxReplicas: 40
#   metrics:
#   # - type: Resource
#   #   resource:
#   #     name: cpu
#   #     target:
#   #       type: Utilization
#   #       averageUtilization: 50
#   # - type: Pods
#   #   pods:
#   #     metric:
#   #       name: redis_key_size
#   #     targetAverageValue: 1k
#   - type: Object
#     object:
#       metric:
#         name: redis_key_size
#       describedObject:
#         apiVersion: networking.k8s.io/v1beta1
#         kind: Ingress
#         name: main-route
#       target:
#         # kind: Value
#         averageValue: 40

---
# FIXME add service-monitor for prometheus
# also add https://github.com/oliver006/redis_exporter/blob/master/contrib/sample_collect_script.lua
# to scrape list length

# kubectl -n mastodon-watcher exec redis-78dbb7f6d9-4zfjr redis-cli keys "*"

# kubectl -n mastodon-watcher exec redis-78dbb7f6d9-4zfjr -- redis-cli --scan --pattern "*"

# EVAL 'local val="Hello Compose" return val' 0
# EVAL 'local val=redis.call("llen", "mastodon") return val' 0
# EVAL 'local val=redis.call("llen", ARGV[1]) return val' 0 "mastodon"
